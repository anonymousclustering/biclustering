// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// kernel_biclustering
Rcpp::List kernel_biclustering(const arma::mat X, const arma::uword k, const arma::uword iterations, const arma::uword restarts, const std::string init_method, const std::string method_name, const std::string kernel_name);
RcppExport SEXP _kernelbiclustering_kernel_biclustering(SEXP XSEXP, SEXP kSEXP, SEXP iterationsSEXP, SEXP restartsSEXP, SEXP init_methodSEXP, SEXP method_nameSEXP, SEXP kernel_nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type k(kSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type iterations(iterationsSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type restarts(restartsSEXP);
    Rcpp::traits::input_parameter< const std::string >::type init_method(init_methodSEXP);
    Rcpp::traits::input_parameter< const std::string >::type method_name(method_nameSEXP);
    Rcpp::traits::input_parameter< const std::string >::type kernel_name(kernel_nameSEXP);
    rcpp_result_gen = Rcpp::wrap(kernel_biclustering(X, k, iterations, restarts, init_method, method_name, kernel_name));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_kernelbiclustering_kernel_biclustering", (DL_FUNC) &_kernelbiclustering_kernel_biclustering, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_kernelbiclustering(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
